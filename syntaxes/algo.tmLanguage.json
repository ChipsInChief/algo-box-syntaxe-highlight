{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Algo",
  "patterns": [
    {
      "include": "#entities"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#comments"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.type.algo",
          "match": "\\b(?i)(entier|r[eé]el|num[eé]rique|cha[iî]ne|caract[èe]re|bool[ée]en|tableau|liste|pile|file|ensemble)(s)?\\b"
        },
        {
          "name": "keyword.control.algo",
          "match": "\\b(?i)((d[eé]but_|fin([_ ])?)?(algorithme|si(non)?|pour|tant[_ ]que|tantque))|(variable(s)?|d[eé]but|fin|sinon(_)?si|alors|allant([ _])?de| [aà] |faire|suivant|par([_ ])?pas([_ ])?de|fonction(s)?(_utilis[eé]e(s)?)?)\\b"
        },
        {
          "name": "keyword.operator.logical.python",
          "match": "\\b(?i)(?:et|ou|non|div|mod|inf|sup|eg|different|infeg|supeg|ouexclusif)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.algo",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.algo",
          "match": "\\\\."
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.numeric.algo",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        },
        {
          "name": "constant.character.algo",
          "match": "'(\\\\(?:\\\\|[\"'\\\\nrtbfve]|[0-7]{1,3}|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})|&(?:lt|#60);|[^\\\\'])'"
        },
        {
          "name": "constant.language.boolean.algo",
          "match": "\\b(?i)(vrai|faux)\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.algo",
          "match": "\\b(?!(?i)(en|est_du_type)\\b)\\w+\\b"
        }
      ]
    },
    "entities": {
      "patterns": [
        {
          "name": "entity.name.function.cs",
          "match": "\\b(?i)(lire|[eé]crire|afficher)\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.algo",
          "begin": "//",
          "end": "\n"
        },
        {
          "name": "comment.block.algo",
          "begin": "/[*]",
          "end": "[*](/)"
        }
      ]
    }
  },
  "scopeName": "source.algo"
}
